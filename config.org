* general.el
#+BEGIN_SRC emacs-lisp
(use-package which-key :ensure t
  :config
  (which-key-mode 1))

(defun my-cider-test-run-test ()
  "Run `some-command' and `some-other-command' in sequence."
  (interactive)
  (cider-ns-refresh)
  (cider-test-run-test))

(use-package general :ensure t
  :config
  (general-define-key
   :states '(normal visual emacs)
   :keymaps 'override
   :prefix "SPC"
   :non-normal-prefix "C-SPC"
   "b" 'counsel-switch-buffer
   "d" 'my-debug
   "h" 'dap-hydra
   "f" 'find-file
   "i" 'imenu
   "p" '(:keymap projectile-command-map :wk "projectile prefix" :package projectile)
   "g" 'magit-status
   "m" 'magit-dispatch
   ";" 'avy-goto-char
   "l" 'mc/edit-lines
   "]" 'forward-sexp
   "[" 'backward-sexp
   "S" 'paredit-forward-barf-sexp
   "s" 'paredit-forward-slurp-sexp
   "/" 'swiper
   "e" 'er/expand-region)

  (general-define-key
   :states '(normal visual emacs)
   :keymaps 'clojure-mode-map
   :prefix ";"
   "j" 'cider-jack-in
   "r" 'cider-switch-to-repl-buffer
   "t" 'my-cider-test-run-test
   "p" 'cider-test-run-project-tests
   "o" 'cljr-clean-ns
   "f" 'cider-format-buffer
   "v" 'cider-find-var)

   (general-define-key
   "C-s" 'counsel-projectile-ag
   "C-d" 'evil-scroll-page-down
   "C-u" 'evil-scroll-page-up))
#+END_SRC

* move lines
#+BEGIN_SRC emacs-lisp
(defun move-line-up ()
"Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key [(meta shift up)]  'move-line-up)
(global-set-key [(meta shift down)]  'move-line-down)
#+END_SRC

* C-c keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i") (lambda() (interactive)(find-file "~/.emacs.d/init.el")))
(global-set-key (kbd "C-c o") (lambda() (interactive)(find-file "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c j") 'join-line)
(global-set-key (kbd "C-c r") (lambda() (interactive)(load-file "~/.emacs.d/init.el")))
#+END_SRC

* custom theme
** themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t)

(use-package leuven-theme 
  :ensure t
  :config (load-theme 'leuven t))
#+END_SRC

** else
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  )

(use-package all-the-icons
  :ensure t
  )

(setq delete-old-versions -1 )		; delete excess backup versions silently
(setq coding-system-for-read 'utf-8 )	; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
(setq default-fill-column 80)		; toggle wrapping text at the 80th character
(setq initial-scratch-message "") ; print a default message in the empty scratch buffer opened at startup
(setq make-backup-files nil) ; disable ~ files
(setq create-lockfiles nil) ;disable # files

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(blink-cursor-mode 0)
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)

#+END_SRC

* evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :config
  (evil-mode 1))

(use-package evil-surround
  :config
  (global-evil-surround-mode 1))

(use-package evil-magit
  :ensure t
  :after (evil magit))
#+END_SRC

* git
#+BEGIN_SRC emacs-lisp
(use-package magit 
  :ensure t
  :config
  (global-auto-revert-mode 1)
  (setq auto-revert-check-vc-info t)
  )
#+END_SRC

* code navigation
#+BEGIN_SRC emacs-lisp
(use-package avy 
  :ensure t
  )

(use-package expand-region
  :ensure t
  :bind (("C-c d" . er/expand-region))
  )
#+END_SRC

* clojure
#+BEGIN_SRC emacs-lisp
(use-package clj-refactor
  :ensure t
  )

(use-package cider
  :ensure t
  )

(use-package clojure-mode
  :ensure t
  )

(defun my-clojure-mode-hook ()
    (rainbow-delimiters-mode 1)
    (clj-refactor-mode 1)
    (yas-minor-mode 1) 
    (cljr-add-keybindings-with-prefix "C-c C-m"))

(add-hook 'clojure-mode-hook #'my-clojure-mode-hook)

(defun my-paredit-hook ()
  (paredit-mode 1))

(add-hook 'clojure-mode-hook 'my-paredit-hook)

#+END_SRC

* markown
#+BEGIN_SRC emacs-lisp
;; run `brew install pandoc` once
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\.markdown\\'" . markdown-mode))
  :init (custom-set-variables '(markdown-command "/usr/local/bin/pandoc")))
#+END_SRC
 
* ivy, counsel, swiper, projectile
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  )

(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  )

(use-package counsel
  :ensure t
  :config
  (counsel-mode 1))

(use-package projectile
  :ensure t
  :config 
  (projectile-mode +1)
  )

(use-package counsel-projectile
  :ensure t
  :config
  (counsel-projectile-mode 1)
  )

(use-package ag 
  :ensure t)

#+END_SRC

* yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :config (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
)
#+END_SRC

* exec-path
#+BEGIN_SRC emacs-lisp
  ;; (use-package exec-path-from-shell
    ;; :ensure t
    ;; :config
    ;; (when (memq window-system '(mac ns x))
      ;; (exec-path-from-shell-initialize)))

(use-package exec-path-from-shell
  :ensure t
  :config (exec-path-from-shell-initialize))

#+END_SRC

* neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree 
  :ensure t
  :bind (("<f8>" . neotree-toggle))
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (setq neo-window-fixed-size nil)
  )
#+END_SRC

* commenting
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-/") 'comment-line)
#+END_SRC

* org-mode
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

* go
Note: Install gocode https://github.com/mdempsky/gocode first, required for go auto-complete.
#+BEGIN_SRC emacs-lisp
(require 'dap-go)
(use-package go-mode
  :ensure t
  :init
  :config
  (progn 
  (autoload 'go-mode "go-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  (electric-pair-mode 1)
  (add-hook 'before-save-hook #'gofmt-before-save)))

(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
(add-hook 'go-mode-hook #'dap-mode)
(add-hook 'go-mode-hook #'dap-ui-mode)
(add-hook 'go-mode-hook #'paredit-mode)

(defun my-debug ()
  (interactive)
  (call-interactively 'dap-debug-last)
  (call-interactively 'dap-hydra))

(add-to-list 'load-path "~/go/src/github.com/mdempsky/gocode/emacs/")

(use-package popup
  :ensure t)
  
(use-package auto-complete
  :ensure t
  :after (popup))

(require 'go-autocomplete)
(require 'auto-complete-config)
(ac-config-default)

#+END_SRC

* iedit
Use shortcut C-; to mark all occurences. Edit 1 -> change all.
#+BEGIN_SRC emacs-lisp
(use-package iedit
  :ensure t
  )

#+END_SRC

* python
 #+BEGIN_SRC emacs-lisp
(use-package elpy
:ensure t
:init
(elpy-enable))

(use-package py-autopep8
  :ensure t
  :init
  (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
)
 
 #+END_SRC
 
* hydra

#+BEGIN_SRC emacs-lisp

(defhydra hydra-window (:hint nil)
"
^window^
^^^^^^^^-----------------------------------------------------------------
_r_: right
_b_: below
_o_: next
_k_: close
_x_: kill
_1_: close others
"

("r" split-window-right)
("b" split-window-below)
("k" delete-window)
("o" other-window)
("x" kill-buffer-and-window)
("1" delete-other-windows)
)

(global-set-key (kbd "C-c p") 'hydra-window/body)
 

(defhydra hydra-cider (:hint nil)
"
^sexp^                       ^test^                           ^misc^
^^^^^^^^-----------------------------------------------------------------
_r_: raise                   _p_: run all project tests       _e_: eval
_s_: slurp                   _t_: run test                    _v_: go to definition
_b_: barf
"

("r" raise-sexp)
("p" cider-test-run-project-tests)
("t" my-cider-test-run-test)
("s" paredit-forward-slurp-sexp)
("b" paredit-forward-barf-sexp)
("e" cider-eval-defun-at-point)
("v" cider-find-var)
) 

(global-set-key (kbd "C-c ;") 'hydra-cider/body)


 #+END_SRC
* flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config 
  (global-flycheck-mode))

#+END_SRC
